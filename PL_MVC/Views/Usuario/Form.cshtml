@model ML.Usuario
@{
    ViewBag.Title = "Form";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container">
    <div class="row">
        <div class="col-md-12">
            <h2>Usuario</h2>
            <h5>Ingrese los datos del Usuario:</h5>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <hr />
        </div>
    </div>
    <br/>
    @using (Html.BeginForm("Form", "Usuario", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {

        <div class="row">
            <div class="col-md-3">
                @Html.LabelFor(model => model.IdUsuario, new { @class = "hidden" })
                @Html.TextBoxFor(model => model.IdUsuario, new { @class = "hidden form-control", autocomplete = "off" })
                @Html.ValidationMessageFor(model => model.IdUsuario)
                @*hidden*@
            </div>
        </div>

        <div class="row">
            <div class="col-md-3 col-xs-12 col-sm-6" >
                @Html.LabelFor(model => model.UserName)
                <div class="input-group">
                    <span class="input-group-addon" ><i class="glyphicon glyphicon-user"></i></span>
                    @Html.TextBoxFor(model => model.UserName, new { @class = "form-control", @id = "txtUserName", @placeholder = "Username", maxlength = "15", @autocomplete = "off" })
                    @Html.ValidationMessageFor(model => model.UserName)
                </div>
            </div>
            <div class="col-md-3 col-xs-12 col-sm-6">
                @Html.LabelFor(model => model.Nombre)
                <div class="input-group">
                    <span class="input-group-addon"><i class="glyphicon glyphicon-font"></i></span>
                    @Html.TextBoxFor(model => model.Nombre, new { @class = "form-control", @id = "txtNombre", @placeholder = "Nombre", @onkeypress = "return SoloLetrasEspacios(event, 'lblErrorNombre')", @autocomplete = "off" })
                    @Html.ValidationMessageFor(model => model.Nombre)
                </div>
                <label id="lblErrorNombre"></label>
            </div>
            <div class="col-md-3 col-xs-12 col-sm-6">
                @Html.LabelFor(model => model.ApellidoPaterno)
                <div class="input-group">
                    <span class="input-group-addon"><i class="glyphicon glyphicon-font"></i></span>
                    @Html.TextBoxFor(model => model.ApellidoPaterno, new { @class = "form-control", @id = "txtApellidoPaterno", @placeholder = "Apellido Paterno", @onkeypress = "return SoloLetras(event, 'lblErrorApellidoPaterno')", @autocomplete = "off" })
                    @Html.ValidationMessageFor(model => model.ApellidoPaterno)
                </div>
                <label id="lblErrorApellidoPaterno"></label>
            </div>
            <div class="col-md-3 col-xs-12 col-sm-6">
                @Html.LabelFor(model => model.ApellidoMaterno)
                <div class="input-group">
                    <span class="input-group-addon"><i class="glyphicon glyphicon-font"></i></span>
                    @Html.TextBoxFor(model => model.ApellidoMaterno, new { @class = "form-control", @id = "txtApellidoMaterno", @placeholder = "Apellido Materno", @onkeypress = "return SoloLetras(event, 'lblErrorApellidoMaterno')", @autocomplete = "off" })
                    @Html.ValidationMessageFor(model => model.ApellidoMaterno)
                </div>
                <label id="lblErrorApellidoMaterno"></label>
            </div>
        </div>
        
        <div class="row">
            <div class="col-md-3 col-xs-12 col-sm-6">
                @Html.LabelFor(model => model.Email)
                <div class="input-group">
                    <span class="input-group-addon"><i class="glyphicon glyphicon-envelope"></i></span>
                    @Html.TextBoxFor(model => model.Email, new { @class = "form-control", @id = "txtEmail", @placeholder = "Email", @onblur = "return ValidarEmail(this)" })
                    @Html.ValidationMessageFor(model => model.Email)
                </div>
                <label id="txtEmail"></label>
            </div>
            <div class="col-md-3 col-xs-12 col-sm-6">
                <label>Confirmar Email</label>
                <div class="input-group">
                    <span class="input-group-addon"><i class="glyphicon glyphicon-envelope"></i></span>
                    @Html.TextBoxFor(model => model.Email, new { @class = "form-control", @id = "txtConfirmarEmail", @placeholder = "Confirmar Email", @onblur = "return CoincidirEmail(this)" })
                    @Html.ValidationMessageFor(model => model.Email)
                </div>
                <label id="txtConfirmarEmail"></label>
            </div>
            
            <div class="col-md-3 col-xs-12 col-sm-6">
                @Html.LabelFor(model => model.Sexo)
                <div class="input-group">
                    <span class="input-group-btn"><img id="ImageMasculino" src="~/img/masculino.png" style="height: 40px; width: 40px; " /></span>
                    @Html.RadioButtonFor(model => model.Sexo, "M ", new { @class = "form-control", @id = "txtMasculino" })
                    <span class="input-group-btn"><img id="ImageFemenino" src="~/img/femenino.png" style="height: 40px; width: 40px; " /></span>
                    @Html.RadioButtonFor(model => model.Sexo, "F ", new { @class = "form-control", @id = "txtFemenino" })
                    
                    @Html.ValidationMessageFor(model => model.Sexo)
                </div>
            </div>
            <div class="col-md-3 col-xs-12 col-sm-6" id="tel">
                @Html.LabelFor(model => model.Telefono)
                <div class="input-group">
                    <span class="input-group-addon"><i class="glyphicon glyphicon-phone-alt"></i></span>
                    @Html.TextBoxFor(model => model.Telefono, new { @class = "form-control", @id = "txtTelefono", @placeholder = "Telefono", @onkeypress = "return SoloNumeros(event, 'lblErrorTelefono')", maxlength = "10", @autocomplete = "off" })
                    @Html.ValidationMessageFor(model => model.Telefono, null, new { @class = "text-danger" })
                </div>
                <label id="lblErrorTelefono"></label>
            </div>
        </div>
        <div class="row">
            <div class="col-md-3 col-xs-12 col-sm-6">
                @Html.LabelFor(model => model.Celular)
                <div class="input-group">
                    <span class="input-group-addon"><i class="glyphicon glyphicon-earphone"></i></span>
                    @Html.TextBoxFor(model => model.Celular, new { @class = "form-control", @id = "txtCelular", @placeholder = "Celular", @onkeypress = "return SoloNumeros(event, 'lblErrorCelular')", maxlength = "10", @autocomplete = "off" })
                    @Html.ValidationMessageFor(model => model.Celular)
                </div>
                <label id="lblErrorCelular"></label>
            </div>
            <div class="col-md-3 col-xs-12 col-sm-6">
                @Html.LabelFor(model => model.FechaNacimiento)
                <div class="input-group">
                    <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                    @Html.TextBoxFor(model => model.FechaNacimiento, new { @class = "form-control", @id = "txtFechaNacimiento", @placeholder = "Fecha de Nacimiento" })
                    @Html.ValidationMessageFor(model => model.FechaNacimiento)
                </div>
            </div>
            <div class="col-md-3 col-xs-12 col-sm-6">
                @Html.LabelFor(model => model.CURP)
                <div class="input-group">
                    <span class="input-group-addon"><i class="glyphicon glyphicon-folder-close"></i></span>
                    @Html.TextBoxFor(model => model.CURP, new { @class = "form-control", @id = "txtCURP", @placeholder = "CURP", maxlength = "18", @onkeypress = "return ValidacionCURP(event, 'lblErrorCURP')", @onkeyup="mayusculas(this)"})
                    @Html.ValidationMessageFor(model => model.CURP)
                </div>
                <label id="lblErrorCURP"></label>
            </div>
            <div class="col-md-3 col-xs-12 col-sm-6">
                @Html.LabelFor(model => model.Direccion.Colonia.CodigoPostal)
                <div class="input-group">
                    <span class="input-group-addon"><i class="glyphicon glyphicon-sound-5-1"></i></span>
                    @Html.TextBoxFor(model => model.Direccion.Colonia.CodigoPostal, new { @class = "form-control", @id = "txtCodigoPostal", @placeholder = "Codigo Postal", @onkeypress = "return SoloNumeros(event, 'lblErrorCodigoPostal')", maxlength="5" })
                    @Html.ValidationMessageFor(model => model.Direccion.Colonia.CodigoPostal)
                </div>
                <label id="lblErrorCodigoPostal"></label>
            </div>
            <div class="col-md-1">
                @Html.LabelFor(model => model.Direccion.IdDireccion, new { @class = "hidden" })
                @Html.TextBoxFor(model => model.Direccion.IdDireccion, new { @class = "hidden form-control", autocomplete = "off" })
                @Html.ValidationMessageFor(model => model.Direccion.IdDireccion)
            </div>
        </div>

        <div class="row">
            <div class="col-md-3 col-xs-12 col-sm-6">
                <label>Pais</label>
                <div class="input-group">
                    <span class="input-group-addon"><i class="glyphicon glyphicon-globe"></i></span>
                    @if (Model.Direccion.Colonia.Municipio.Estado.Pais.Paises == null)
                    {
                        @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.Estado.Pais.IdPais, new SelectList(string.Empty, "Value", "Text"), "Selecciona un Estado", htmlAttributes: new { id = "ddlPais", @class = "form-control" })
                    }
                    else
                    {
                        @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.Estado.Pais.IdPais, new SelectList(Model.Direccion.Colonia.Municipio.Estado.Pais.Paises, "IdPais", "Nombre"), "Selecciona un país", htmlAttributes: new { id = "ddlPais", @class = "form-control" })
                    }
                </div>
            </div>
            @Html.ValidationMessageFor(model => model.Direccion.Colonia.Municipio.Estado.Pais.IdPais, null, new { @class = "text-danger" })


            <div class="col-md-3 col-xs-12 col-sm-6">
                <label>Estado</label>
                <div class="input-group">
                    <span class="input-group-addon"><i class="glyphicon glyphicon-flag"></i></span>
                    @if (Model.Direccion.Colonia.Municipio.Estado.Estados == null)
                    {
                        @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.Estado.IdEstado, new SelectList(string.Empty, "Value", "Text"), "Selecciona un Estado", htmlAttributes: new { id = "ddlEstado", @class = "form-control" })
                    }
                    else
                    {
                        @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.Estado.IdEstado, new SelectList(Model.Direccion.Colonia.Municipio.Estado.Estados, "IdEstado", "Nombre"), "Selecciona un Estado", htmlAttributes: new { id = "ddlEstado", @class = "form-control" })
                    }
                </div>
            </div>
            @Html.ValidationMessageFor(model => model.Direccion.Colonia.Municipio.Estado.IdEstado, null, new { @class = "text-danger" })

            <div class="col-md-3 col-xs-12 col-sm-6">
                <label>Municipio</label>
                <div class="input-group">
                    <span class="input-group-addon"><i class="glyphicon glyphicon-flag"></i></span>
                    @if (Model.Direccion.Colonia.Municipio.Municipios == null)
                    {
                        @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.IdMunicipio, new SelectList(string.Empty, "Value", "Text"), "Selecciona un Municipio", htmlAttributes: new { id = "ddlMunicipio", @class = "form-control" })
                    }
                    else
                    {
                        @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.IdMunicipio, new SelectList(Model.Direccion.Colonia.Municipio.Municipios, "IdMunicipio", "Nombre"), "Selecciona un municipio", htmlAttributes: new { id = "ddlMunicipio", @class = "form-control" })
                    }
                </div>
            </div>
            @Html.ValidationMessageFor(model => model.Direccion.Colonia.Municipio.IdMunicipio, null, new { @class = "text-danger" })


            <div class="col-md-3 col-xs-12 col-sm-6">
                <label>Colonia</label>
                <div class="input-group">
                    <span class="input-group-addon"><i class="glyphicon glyphicon-map-marker"></i></span>
                    @if (Model.Direccion.Colonia.Colonias == null)
                    {
                        @Html.DropDownListFor(model => model.Direccion.Colonia.IdColonia, new SelectList(string.Empty, "Value", "Text"), "Selecciona una colonia", htmlAttributes: new { id = "ddlColonia", @class = "form-control" })
                    }
                    else
                    {
                        @Html.DropDownListFor(model => model.Direccion.Colonia.IdColonia, new SelectList(Model.Direccion.Colonia.Colonias, "IdColonia", "Nombre"), "Selecciona una colonia", htmlAttributes: new { id = "ddlColonia", @class = "form-control" })
                    }
                </div>
            </div>
            @Html.ValidationMessageFor(model => model.Direccion.Colonia.IdColonia, null, new { @class = "text-danger" })
        </div>
        <br />

    <div class="row">
        <div class="col-md-3 col-xs-12 col-sm-6">
            @Html.LabelFor(model => model.Direccion.Calle)
            <div class="input-group">
                <span class="input-group-addon"><i class="glyphicon glyphicon-road"></i></span>
                @Html.TextBoxFor(model => model.Direccion.Calle, new { @class = "form-control", @id = "txtCalle", @placeholder = "Calle", @autocomplete = "off" })
                @Html.ValidationMessageFor(model => model.Direccion.Calle)
            </div>
        </div>
        <div class="col-md-3 col-xs-12 col-sm-6">
            @Html.LabelFor(model => model.Direccion.NumeroInterior)
            <div class="input-group">
                <span class="input-group-addon"><i class="glyphicon glyphicon-sort-by-order"></i></span>
                @Html.TextBoxFor(model => model.Direccion.NumeroInterior, new { @class = "form-control", @id = "txtNumeroInterior", @placeholder = "Numero Interior", @onkeypress = "return SoloNumeros(event, 'lblErrorNumeroInterior')", maxlength = "4", @autocomplete = "off", @onkeyup = "return Rango(this, 'lblErrorNumeroInterior')" })
                @Html.ValidationMessageFor(model => model.Direccion.NumeroInterior)
            </div>
            <label id="lblErrorNumeroInterior"></label>
         </div>
        <div class="col-md-3 col-xs-12 col-sm-6">
            @Html.LabelFor(model => model.Direccion.NumeroExterior)
            <div class="input-group">
                <span class="input-group-addon"><i class="glyphicon glyphicon-sort-by-order"></i></span>
                @Html.TextBoxFor(model => model.Direccion.NumeroExterior, new { @class = "form-control", @id = "txtNumeroExterior", @placeholder = "Numero Exterior", @onkeypress = "return SoloNumeros(event, 'lblErrorNumeroExterior')", maxlength = "4", @autocomplete = "off", @onkeyup = "return Rango(this, 'lblErrorNumeroExterior')" })
                @Html.ValidationMessageFor(model => model.Direccion.NumeroExterior)
            </div>
            <label id="lblErrorNumeroExterior"></label>
        </div>
        </div>

    <div class="row">
        <div class="col-md-3 col-xs-12 col-sm-6">
            @Html.LabelFor(model => model.Password)
            <div class="input-group">
                <span class="input-group-addon"><i class="glyphicon glyphicon-lock"></i></span>
                @Html.TextBoxFor(model => model.Password, new { @class = "form-control", @id = "txtPassword", @placeholder = "Password", autocomplete = "off", @type = "password" })
                @Html.ValidationMessageFor(model => model.Password)
            </div>
        </div>
        <div class="col-md-3 col-xs-12 col-sm-6">
            <label>Confirmar Password</label>
            <div class="input-group">
                <span class="input-group-addon"><i class="glyphicon glyphicon-lock"></i></span>
                @Html.TextBoxFor(model => model.Password, new { @class = "form-control", @id = "txtConfirmarPassword", @placeholder = "Confirmar Password", @onkeyup = "return CoincidirPassword(this)", @type = "password", autocomplete = "off" })
                @Html.ValidationMessageFor(model => model.Password)
            </div>
        </div>
        <div class="col-md-3 col-xs-12 col-sm-6">
            @Html.LabelFor(model => model.Rol)
            <div class="input-group">
                <span class="input-group-addon"><i class="glyphicon glyphicon-collapse-down"></i></span>
                @Html.DropDownListFor(model => model.Rol.IdRol, new SelectList(Model.Rol.Roles, "IdRol", "Nombre"), "Selecciona el rol", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Rol.IdRol)
            </div>
        </div>
        <div class="col-md-3 col-xs-12 col-sm-6">
            @Html.LabelFor(model => model.Estatus)
            <div class="input-group">
                <span class="input-group-addon"><i class="glyphicon glyphicon-sort"></i></span>
                @Html.TextBoxFor(model => model.Estatus, new { @class = "form-control", @id = "txtEstatus", @placeholder = "Estatus" })
                @Html.ValidationMessageFor(model => model.Estatus)
            </div>
        </div>
    </div>
        <br />
    <div class="row">
        <div class="col-md-3 col-xs-12 col-sm-6">
            @Html.LabelFor(model => model.Imagen)
            <input type="file" name="ImagenData" onchange="readURL(this);">
            @if (Model.Imagen != null)
            {
                <img id="ImagenPreview" src="data:image/jpeg;base64,@Convert.ToBase64String(Model.Imagen)" width="100" height="100" />
            }
            else
            {
                <img id="ImagePreview" src="~/Content/sinproducto.jpg" style=" height:150px; width:150px;" />
            }
        </div>
    </div>
        <br />

        <div class="form-inline">
            <div class="col-md-6 col-xs-12 col-sm-6">
                <input type="submit" value="Guardar" class="btn btn-success" />
                @Html.ActionLink("Regresar", "GetAll", "Usuario", htmlAttributes: new { @class = "btn btn-danger" })
            </div>
        </div>

 @*------------------------------------------------------------------------------------------------------------------------*@       
        
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.6/jquery.min.js" type="text/javascript"></script>
        <script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8/jquery-ui.min.js" type="text/javascript"></script>
        <link href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/base/jquery-ui.css" rel="Stylesheet" type="text/css" />
       
<script type="text/javascript">

    var j = jQuery.noConflict();

    j(function () {
        j("#txtFechaNacimiento").datepicker({
            dateFormat: 'dd-mm-yy',
            //showOn: 'button',
            //buttonImage: "../img/calendar.png",
            //buttonImageOnly: true,
            changeMonth: true,
            changeYear: true

        });
        $(".ui-datepicker-trigger").css("width", "30px");
        $(".ui-datepicker-trigger").css("height", "30px");
    });
</script>
    }
</div>

@*------------------------------------------------------------------------------------------------------------------------*@

<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.6/jquery.min.js" type="text/javascript"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8/jquery-ui.min.js" type="text/javascript"></script>
<link href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/base/jquery-ui.css" rel="Stylesheet" type="text/css" />

    @Scripts.Render("~/bundles/jquery")
    <script type="text/javascript">

        function readURL(input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    $('#ImagePreview').attr('src', e.target.result);
                };
                reader.readAsDataURL(input.files[0]);
            }
        }

        $(document).ready(function () {
            //Cambio a estados cuando pais se selecciona
            $("#ddlPais").change(function () {
                $("#ddlEstado").empty();
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetEstado")',
                    dataType: 'json',
                    data: { IdPais: $("#ddlPais").val() },
                    success: function (estados) {
                        $("#ddlEstado").append('<option value="0">' + 'Seleccione una opción' + '</option>');
                        $.each(estados, function (i, estados) {
                            $("#ddlEstado").append('<option value="' + estados.IdEstado + '">' + estados.Nombre + '</option>');
                        });
                    },
                    error: function (ex) {
                        alert('Failed.' + ex);
                    }
                });
            });
            //cambio de municipios cuando un estado se selecciona
            $("#ddlEstado").change(function () {
                $("#ddlMunicipio").empty();
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetMunicipio")',
                    dataType: 'json',
                    data: { IdEstado: $("#ddlEstado").val() },
                    success: function (municipios) {
                        $("#ddlMunicipio").append('<option value="0">' + 'Seleccione una opción' + '</option>');
                        $.each(municipios, function (i, municipios) {
                            $("#ddlMunicipio").append('<option value="' + municipios.IdMunicipio + '"> ' + municipios.Nombre + '</option>');
                        });
                    },
                    error: function (ex) {
                        alert('Failed.' + ex);
                    }
                });
            });
            //cambio de colonias cuando un municipio se selecciona
            $("#ddlMunicipio").change(function () {
                $("#ddlColonia").empty();
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetColonia")',
                    dataType: 'json',
                    data: { IdMunicipio: $("#ddlMunicipio").val() },
                    success: function (colonias) {
                        $("#ddlColonia").append('<option value="0">' + 'Seleccione una opción' + '</option>');
                        $.each(colonias, function (i, colonias) {
                            $("#ddlColonia").append('<option value="'
                                                               + colonias.IdColonia + '"> ' + colonias.Nombre + ' </option>');
                        });
                    },
                    error: function (ex) {
                        alert('Failed.' + ex);
                    }
                });
            });
        })

        function Rango(content, controlId) {
            if (parseInt(content.value) >= 0 && parseInt(content.value) <= 1000) {
                $('#' + controlId).text("");
                return true;
            }
            else {
                $('#' + controlId).text("El numero debe ser entre 0 y 1000");
                $('#' + controlId).css({ "color": "red" });
                return false;
            }
        }

        function ValidarEmail() {
            var txtEmail = $("#txtEmail");
            var Email = /^(([^<>()[\]\\.,;:\s@@"]+(\.[^<>()[\]\\.,;:\s@@"]+)*)|(".+"))@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
            if (Email.test(txtEmail.val())) {
                $('#txtEmail').text("Email correcto");
                $('#txtEmail').css('border-color', 'green');
            }
            else {
                $('#txtEmail').text("Email incorrecto");
                $('#txtEmail').css('border-color', 'red');
            }
        }

        function CoincidirEmail() {
            var txtEmail = $("#txtEmail");
            var txtConfirmarEmail = $("#txtConfirmarEmail");
            if (txtEmail.val() == txtConfirmarEmail.val()) {
                $('#txtConfirmarEmail').css('border-color', 'green');
            }
            else {
                $('#txtConfirmarEmail').css('border-color', 'red');
            }
        }

        function CoincidirPassword() {
            var txtPassword = $("#txtPassword");
            var txtConfirmarPassword = $("#txtConfirmarPassword");
            if (txtPassword.val() == txtConfirmarPassword.val()) {
                $('#txtConfirmarPassword').css('border-color', 'green');
            }
            else {
                $('#txtConfirmarPassword').css('border-color', 'red');
            }
        }

        function SoloLetras(e, controlId) {
            var caracter = e.key;
            if (!/^[a-zA-Z]*$/g.test(caracter)) {
                $('#' + controlId).text("Solo se aceptan letras");
                $('#' + controlId).css({ "color": "red" });
                return false;
            }
            else {
                $('#' + controlId).text("");
                return true;
            }
        }

        function SoloLetrasEspacios(e, controlId) {
            var caracter = e.key;
            if (!/^[a-zA-Z ]*$/g.test(caracter)) {
                $('#' + controlId).text("Solo se aceptan letras");
                $('#' + controlId).css({ "color": "red" });
                return false;
            }
            else {
                $('#' + controlId).text("");
                return true;
            }
        }


        function SoloNumeros(e, controlId) {
            var letra = e.key;
            if (!/[^0-9]/g.test(letra)) {
                $('#' + controlId).text("");
                return true;
            }
            else {
                $('#' + controlId).text("Solo se aceptan numeros");
                $('#' + controlId).css({ "color": "red" });
                return false;
            }
        }

        function ValidacionCURP(e, controlId) {
            var caracter = e.key;
            if (!/^[a-zA-Z0-9]*$/g.test(caracter)) {
                $('#' + controlId).text("Solo se aceptan letras Y numeros");
                $('#' + controlId).css({ "color": "red" });
                return false;
            }
            else {
                $('#' + controlId).text("");
                return true;
            }
        }

        function mayusculas(e) {
            e.value = e.value.toUpperCase();
        }

</script>

